// enable strict mode for better code practice
"use strict";

// define initial variables
var CodeHeader = "#!bin/bash\n#Generated by angsdGUI\n";
var OutField = document.getElementById("code");
var PipelineName = document.getElementById("pipelineName");
var YourPipelineName = document.getElementById("yourPipelineName");
var Analysis = document.getElementById("analysis");  

// declare global variables
var AnalysisName;
var Software;
var Data;

// define initial list of analyses
var JobList = [];

// read json file using jquery
//var getJSON = $.ajax({
	//url: './js/angsd.json',
	//type: 'GET',
	//dataType: 'json',
	//dataContent: 'application/json',
	//data: {get_param: 'value'},
	//success: function (data) {
		//Data = getJSON.responseJSON;
	//}
//});
//this works
jQuery.when(jQuery.getJSON('js/angsd.json')).done( function(json) {
	console.log(json);
	Data = json.responseJSON;
});


// get and write pipeline name on code block header
var getPipelineName = function(){
    if(PipelineName.value){
        YourPipelineName.innerHTML = PipelineName.value + ".sh";
    }else{
        YourPipelineName.innerHTML = "angsdGUI_pipeline.sh";
    }
}


// enable new popovers
var enableNewPops = function(){
    $('[data-toggle="popover"]').popover({html:true});   
}


// dynamic popover
var createPopover = function(Pop, Title, Content){
    Pop.href = "#";
    Pop.setAttribute("data-toggle", "popover");
    Pop.setAttribute("data-trigger", "focus");
    Pop.setAttribute("title", "");
    Pop.setAttribute("data-content", Content);
    Pop.setAttribute("data-original-title", Title);
    var InfileTypePopI = document.createElement('i');
    InfileTypePopI.classList.add("QuestionMark", "fa", "fa-question-circle");
    Pop.appendChild(InfileTypePopI);
}


// dynamic label
var createLabel = function(Label, ForName, LabelText, Required){
    Label.setAttribute("for", ForName);
    Label.classList.add("col-form-label", "form-control-label");
    Label.innerHTML = LabelText;
    if (Required == "Required"){
        Label.classList.add("requiredField");
        Label.innerHTML = LabelText + '<span class="asteriskField">*</span>';
    }
}


// dynamic input
var createInput = function(Input, InputId, Required){
    Input.id = InputId;
    Input.classList.add("textInput", "form-control");
    Input.setAttribute("type", "text");
    Input.setAttribute("name", InputId);
    Input.setAttribute("oninput", "rewriteCode();");
    Input.setAttribute("onpaste", "rewriteCode();");
    if (Required == "Required"){
        Input.setAttribute("required", "required");
    }
}


// dynamic select
var createSelect = function(Select, SelectId, OptionList, Required, onChange){
    Select.id = SelectId;
    Select.classList.add("select", "form-control");
    Select.setAttribute("name", SelectId);
    if (onChange){
        Select.setAttribute("onChange", onChange);
    } else {
        Select.setAttribute("onChange", "rewriteCode();");
    }
    if (Required == "Required"){
        Select.setAttribute("required", "required");
    }
    //Select.required = true;
    Select.length = 0;
    for (var key in OptionList) {
        Select.options[Select.options.length] = new Option(key, OptionList[key]);
    }
}

var getValue = function(param, id){

    var Element = document.getElementById(id);

    if(Element){
        if(Element.value){
            if(param){
                return " " + param + " " + Element.value;
            }
            return " " + Element.value;
        }
        return "";
    }
    return "";
}


// get software path if exists
var getSoftwarePath = function(Software){

    var SoftwarePath = document.getElementById(Software);

    // if element exists
    if(SoftwarePath){

        if(SoftwarePath.value){

            // return what user wrote
            return SoftwarePath.value;

        }

        return Data.Softwares[Software].Call;
    }
    return;
}


var getAnalysis = function(){

    AnalysisName = Analysis.options[Analysis.selectedIndex].value;

    // remove previously generated substeps
    //rmSubSteps();

    // clear list of functions
    JobList = [];

    //console.log("here1")

    //console.log(Analysis.options[Analysis.selectedIndex].value)

    // if analysis selected
    if (Analysis.options[Analysis.selectedIndex].value) {

        //console.log("success")

        var InfileTypes = Data[AnalysisName].Infiles;

        // create input file type select
        var InfileType = document.createElement('select');  
        createSelect(InfileType, "infileType", InfileTypes, "Required", "ocInfileType();");
        var InfileTypeLabel = document.createElement('label');
        createLabel(InfileTypeLabel, InfileType.id, " Input file type ", "Required");
        var InfileTypePop = document.createElement('a');
        createPopover(
            InfileTypePop, 
            "Input File Type", 
            `File type of input file. <br />
            For more information, see <a href="http://www.popgen.dk/angsd/index.php/Input" target="_blank">angsd wiki input page</a>.
            `
        );
        //addFormItem("formItem", InfileType, InfileTypeLabel, InfileTypePop);

        // create input file name input
        var InfileName = document.createElement('input');
        createInput(InfileName, "infileName", "Required");
        var InfileNameLabel = document.createElement('label');
        createLabel(InfileNameLabel, InfileName.id, " Input file name ", "Required");
        var InfileNamePop = document.createElement('a');
        createPopover(
            InfileNamePop, 
            "Input File Name", 
            `Name of the input file to be used in the analysis. Including extensions if any.
            Provide path to input file if you are not going to run the code in the same directory as the input file.
            e.g. <code>/home/myuser/project/myfile.bamlist</code>`
        );
        //addFormItem("formItem", InfileName, InfileNameLabel, InfileNamePop);
        JobList.push(getValue.bind(null, "", "infileName"));

        // enable new popovers
        enableNewPops();

        // add analysis name to pipeline header
        CodeHeader = "#!bin/bash\n#Generated by angsdGUI\n#"+ Data[AnalysisName].Name + "\n\n";

        // update pipeline
        rewriteCode();
    }
    else {

        CodeHeader = "#!bin/bash\n#Generated by angsdGUI\n";
        rewriteCode();
            
    }
}

// update code onkeyup
var updateCode = function(){
    var code = CodeHeader;
    for (var i=0; i<JobList.length; i++){
        code += JobList[i]();
    } 
    return code;
}

// rewrite code
var rewriteCode = function(){
    var newCode = updateCode();
    OutField.innerHTML = newCode;
}

// rewrite code when document is ready
$(document).ready(function(){
    // add initial step virtual buttons
	rewriteCode();
	//getAnalysis();
    getPipelineName();
    console.log("here1")
    console.log("Data")
	//Data = getJSON.responseJSON;
});
